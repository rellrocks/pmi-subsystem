<?php

namespace App\Http\Controllers\YPICS;

use App\Http\Controllers\Controller;
use App\Http\Controllers\CommonController;
use Illuminate\Http\Request;
use App\Http\Requests;
use Illuminate\Support\Facades\Auth;
use File;
use Carbon\Carbon;
use Config;
use DB;
use Excel;
use PDF;

class FlexScheduleController extends Controller
{
    protected $mysql;
    protected $mssql;
    protected $common;
    protected $com;
    
    public function __construct()
    {
        $this->middleware('auth');
        $this->com = new CommonController;

        if (Auth::user() != null) {
            $this->mysql = $this->com->userDBcon(Auth::user()->productline,'mysql');
            $this->mssql = $this->com->userDBcon(Auth::user()->productline,'mssql');
            $this->common = $this->com->userDBcon(Auth::user()->productline,'common');
        } else {
            return redirect('/');
        }
    }

    public function index()
    {
        if(!$this->com->getAccessRights(Config::get('constants.MODULE_CODE_FLEX'), $userProgramAccess))
        {
            return redirect('/home');
        }
        else
        {
        	# Render WBS Page.
            return view('ypics.flex-schedule',['userProgramAccess' => $userProgramAccess]);
        }
    }

    // Inventory Data Start
    public function processInventoryData()
    {
        $return_data = [
            'msg' => 'Processing Inventory data has failed.',
            'status' => 'failed'
        ];
        $generated = false;

        try {
            $inventory_data = $this->getInventoryData();

            if (count($inventory_data) > 0) {
                $formatted_content = $this->generateInventoryFormat($inventory_data);
                $generated = $this->generateCSVFile("StockQuery","InventoryData",$formatted_content);

                if ($generated) {
                    $return_data = [
                        'msg' => 'Inventory data was processed, Please wait to download.',
                        'status' => 'success'
                    ];
                }
            } else {
                $return_data = [
                    'msg' => 'No data was processed.',
                    'status' => 'failed'
                ];
            }

        } catch (\Exception $th) {
            $return_data = [
                'msg' => $th->getMessage(),
                'status' => 'error'
            ];
        }

        return $return_data;
    }

    private function getInventoryData()
    {
        $data = [];

        $query = "SELECT z.CODE as [CODE], ";
        $query .= "     h.[NAME] as [NAME], ";
        $query .= "     SUM(z.ZAIK) as [STOCK], ";
        $query .= "     SUM(z.ZAIKK) AS [ZAIKK], ";
        $query .= "     (SUM(z.ZAIK)+SUM(z.ZAIKK)) AS [TOTAL] ";
        $query .= "FROM XZAIK as z ";
        $query .= "JOIN XHEAD as h ";
        $query .= "ON z.CODE = h.CODE ";
        $query .= "WHERE z.JYOGAI <> 1 ";
        $query .= "AND (z.ZAIK+z.ZAIKK) > 0 ";
        $query .= "AND z.HOKAN IN ('WHS100','WHS102','ASSY100','ASSY102') ";
        $query .= "GROUP BY z.CODE, h.[NAME]";

        $data = DB::connection($this->mssql)->select($query);

        return $data;
    }

    public function generateInventoryFormat($inventory_data)
    {
    	$i = '"';
    	$o = ',';
        $content = "Code,Name,Stok Total"."\r\n";

        foreach ($inventory_data as $key => $data) {
            $content .= trim(preg_replace('/\t+/','',$data->CODE)).$o.
                        trim(str_replace(",","",preg_replace('/\t+/','',$data->NAME))).$o.
                        trim(preg_replace('/\t+/','',$data->TOTAL))."\r\n";
        }

    	return $content;
    }
    // Inventory Data End

    // Parts Incoming
    public function CheckPPSDeliveryFile(Request $req)
    {
        $return_data = [
            'msg' => "Uploading PPS Delivery file has failed.",
            'status' => 'failed',
        ];

        try {
            $file = $req->file('pps_del_file');
        
            $data = [];
            Excel::selectSheetsByIndex(0)->load($file, function ($reader) use(&$data)
            {
                $data = $reader->toArray();
            });

            $sheet1 = $data;
            $error = 0;
            $end_of_line = 0;
            $row = 2;
            foreach ($sheet1 as $key => $sh) {
                if (!isset($sh['itemcode']) && 
                    !isset($sh['name']) && 
                    !isset($sh['orderno']) &&
                    !isset($sh['schdqty']) &&
                    !isset($sh['ppd_reply'])) {
                    $end_of_line++;
                    break;
                }

                if ($end_of_line == 0) {
                    if (!isset($sh['name'])) {
                        $error++;
                    }

                    if (!isset($sh['orderno'])) {
                        $error++;
                    }

                    if (!isset($sh['schdqty'])) {
                        $error++;
                    }

                    if (!isset($sh['ppd_reply'])) {
                        $error++;
                    }
                }

                if ($error > 0) {
                    $return_data = [
                        'msg' => "Uploading has failed, please check Row ". $row .".",
                        'status' => 'failed',
                    ];

                    break;
                }

                $row++;
            }

            if ($error == 0) {
                $params = [];
                $xslip_data = [];
                $xslip_params = [];
                DB::beginTransaction();

                $xslip_data = DB::connection($this->mssql)
                                ->select("SELECT [PORDER] as orderno,
                                                [NDATE] as deldate,
                                                ([KVOL] - [TJITU]) AS balance
                                        FROM XSLIP
                                        where ([KVOL] - [TJITU]) > 0");

                DB::connection($this->mysql)->table('flex_pps_delivery_xslip')->truncate();

                

                foreach ($xslip_data as $key => $x) {

                    $yy = substr($x->deldate,0,4);
                    $mm = substr($x->deldate,4,2);
                    $dd = substr($x->deldate,6,2);

                    $deldate = $yy.'-'.$mm.'-'.$dd;

                    array_push($xslip_params, [
                        'orderno' => $x->orderno,
                        'balance' => $x->balance,
                        'deldate' => $deldate,
                        'token' => $req->_token
                    ]);
                }

                $xslipBatch = array_chunk($xslip_params, 1000);
                foreach ($xslipBatch as $xslp) {
                    DB::connection($this->mysql)->table('flex_pps_delivery_xslip')->insert($xslp);
                }

                DB::connection($this->mysql)->table('flex_pps_delivery')->truncate();

                foreach ($sheet1 as $key => $sh) {
                    if ((float)$sh['schdqty'] > 0) {
                        array_push($params, [
                            'itemcode' => $sh['itemcode'],
                            'itemname' => $sh['name'],
                            'orderno' => $sh['orderno'],
                            'schdqty' => $sh['schdqty'],
                            'ppd_reply' => $sh['ppd_reply'],
                            'token' => $req->_token
                        ]);
                    }
                }

                $insertBatchs = array_chunk($params, 1000);
                foreach ($insertBatchs as $batch) {
                    DB::connection($this->mysql)->table('flex_pps_delivery')->insert($batch);
                }

                DB::commit();

                $return_data = [
                    'msg' => "",
                    'status' => 'success',
                ];
            }
        } catch (\Exception $th) {
            DB::rollback();

            $return_data = [
                'msg' => $th->getMessage(),
                'status' => 'error',
            ];
        }

        return $return_data;
    }

    public function processPPSDeliveryFile(Request $req)
    {
        $return_data = [
            'msg' => "Processing of PPS Delivery data and YPICS data has failed.",
            'status' => 'failed',
        ];

        $parts_incoming_data = [];
        $generated = false;

        try {
            $parts_incoming_data = DB::connection($this->mysql)
                                    ->select("SELECT pps.orderno as pr,
                                                    DATE_FORMAT(pps.ppd_reply,'%y%m%d') as yec_pu,
                                                    pps.itemcode as mcode,
                                                    pps.itemname as mname,
                                                    'PPS'  as vender,
                                                    pps.schdqty as deliqty
                                            FROM flex_pps_delivery_xslip as x
                                            join flex_pps_delivery as pps
                                            on x.orderno = pps.orderno");
            if (count($parts_incoming_data) > 0) {
                $formatted_content = $this->generatePartsIncomingFormat($parts_incoming_data);
                $generated = $this->generateCSVFile("MRP","PartsIncomingPlan",$formatted_content);

                if ($generated) {
                    $return_data = [
                        'msg' => 'Parts Incoming Plan data was processed, Please wait to download.',
                        'status' => 'success'
                    ];
                }
            } else {
                $return_data = [
                    'msg' => 'No data was processed.',
                    'status' => 'failed'
                ];
            }

            
        } catch (\Exception $th) {
            $return_data = [
                'msg' => $th->getMessage(),
                'status' => 'error',
            ];
        }

        return $return_data;
    }

    public function generatePartsIncomingFormat($pps_data)
    {
    	$i = '"';
    	$o = ',';
        $content = "PR,YEC PU,MCode,MName,VENDER,DeliQty"."\r\n";

        foreach ($pps_data as $key => $data) {
            $content .= trim(preg_replace('/\t+/','',$data->pr)).$o.
                        trim(preg_replace('/\t+/','',$data->yec_pu)).$o.
                        trim(preg_replace('/\t+/','',$data->mcode)).$o.
                        trim(str_replace(",","",preg_replace('/\t+/','',$data->mname))).$o.
                        trim(preg_replace('/\t+/','',$data->vender)).$o.
                        trim(preg_replace('/\t+/','',$data->deliqty))."\r\n";
        }

    	return $content;
    }
    // Parts Incoming End

    // Prod Balance
    public function CheckZYMRFile(Request $req)
    {
        $return_data = [
            'msg' => "Uploading ZYMR file has failed.",
            'status' => 'failed',
        ];

        try {
            $content = $this->getFilePointerUTF8($req->file('zymr_file'));
            $line = [];
            $header = [];
            $rawData = [];
            $data = [];

            // $content = fopen($file,'r');

            $count = 0;
            while(!feof($content)) {
                if ($count < 1) {
                    //collect header
                    $header = explode("\t",fgets($content));
                } else {
                    $line = explode("\t",fgets($content));

                    for ($index=0; $index < count($header); $index++) {
                        if (isset( $line[$index])) {
                            $assoc = preg_replace('/[ \t]+/', ' ', preg_replace('/[\r\n]+/', "", $header[$index]));
                            $rawData[$count-1][$assoc] = $line[$index];
                        }
                    }
                }
                $count++;
            }

            fclose($content);

            foreach ($rawData as $key => $rd) {
                $check_array = $this->checkIndexes($header,$rd);
                if ($check_array) {
                    array_push($data, [
                        'Haccyuu_No' => $rd['Haccyuu_No'], 
                        'Haccyuu_Hoban' => $rd['Haccyuu_Hoban'], 
                        'Hinmoku_Code' => $rd['Hinmoku_Code'], 
                        'Hinmoku_tekisuto' => $rd['Hinmoku_tekisuto'], 
                        'Hokanbasyo' => $rd['Hokanbasyo'], 
                        'MRPKanrisya' => $rd['MRPKanrisya'], 
                        'Haccyuu_Bi' => $rd['Haccyuu_Bi'], 
                        'Siiresaki_Code' => $rd['Siiresaki_Code'], 
                        'Shiiresaki_Tekisuto' => $rd['Shiiresaki_Tekisuto'], 
                        'Haccyuu_Qty' => $rd['Haccyuu_Qty'], 
                        'Haccyuu_Zan_Qty' => $rd['Haccyuu_Zan_Qty'], 
                        'Toukei_kannrenn_nounyuu_Bi' => $rd['Toukei_kannrenn_nounyuu_Bi'], 
                        'Kaitou_Nouki_Jikoku' => $rd['Kaitou_Nouki'].' '.$rd['Kaitou_Jikoku'], 
                        'Kaitou_Qty' => $rd['Kaitou_Qty'], 
                        'Tokuisaki_Code' => $rd['Tokuisaki_Code'], 
                        'Tokuisaki_Mei' => $rd['Tokuisaki_Mei'], 
                        'Tokuisaki_Nouki' => $rd['Tokuisaki_Nouki'], 
                    ]);
                }
                
            }

            DB::beginTransaction();

            DB::connection($this->mysql)->table('flex_prod_balance_zymr')->truncate();

            $inserted = false;

            $insertBatchs = array_chunk($data, 1000);
            foreach ($insertBatchs as $batch) {
                $inserted = DB::connection($this->mysql)->table('flex_prod_balance_zymr')->insert($batch);
            }

            DB::commit();

            if ($inserted) {
                $return_data = [
                    'msg' => "",
                    'status' => 'success',
                ];
            }

        } catch (\Exception $th) {
            DB::rollback();

            $return_data = [
                'msg' => $th->getMessage(),
                'status' => 'error',
            ];
        }

        return $return_data;
    }

    public function processZYMRFile(Request $req)
    {
        $return_data = [
            'msg' => "Processing of Data has failed.",
            'status' => 'failed',
            'errors_data' => []
        ];

        $ypics = [];

        try {
            $ypics = DB::connection($this->mssql)
                        ->select("SELECT r.SORDER as sorder,
                                    s.SEIBAN as seiban,
                                    s.CODE as code,
                                    h.NAME as code_name,
                                    s.KVOL as kvol,
                                    s.TJITU as tjitu,
                                    LEFT(r.CDATE,8) as cdate,
                                    r.CVOL as cvol,
                                    LEFT(r.JDATE,8) as jdate,
                                    r.TJITU as r_tjitu,
                                    C.CUST as cust,
                                    c.CNAME as cname
                                FROM XRECE AS r
                                JOIN XSLIP AS s
                                ON s.SEIBAN = r.SORDER
                                JOIN XHEAD AS h
                                ON h.CODE = r.CODE
                                JOIN XCUST AS c
                                ON c.CUST = r.CUST
                                where (s.KVOL - s.TJITU) > 0
                                AND s.SEIBAN IS NOT NULL
                                AND r.CVOL > r.TJITU");
                                
            $ypics_data = [];
            foreach ($ypics as $key => $yp) {
                array_push($ypics_data, [
                    'sorder' => $yp->sorder,
                    'seiban' => $yp->seiban,
                    'code' => $yp->code,
                    'code_name' => $yp->code_name,
                    'kvol' => $yp->kvol,
                    'tjitu' => $yp->tjitu,
                    'cdate' => $yp->cdate,
                    'cvol' => $yp->cvol,
                    'jdate' => $yp->jdate,
                    'r_tjitu' => $yp->r_tjitu,
                    'cust' => $yp->cust,
                    'cname' => $yp->cname
                ]);
            }

            DB::connection($this->mysql)->table('flex_prod_balance_ypics')->truncate();
            DB::connection($this->mysql)->table('flex_prod_balance_error')->truncate();
            $ypics_inserted = false;
            $batches = array_chunk($ypics_data, 1000);
            foreach ($batches as $btch) {
                $ypics_inserted = DB::connection($this->mysql)->table('flex_prod_balance_ypics')->insert($btch);
            }

            if (!$ypics_inserted) {
                $return_data = [
                    'msg' => "Retrieving data from TPICS was unsuccessful.",
                    'status' => 'failed',
                    'errors_data' => []
                ];
            } else {
                $zymr_ypics = [];
                $zymr_ypics = DB::connection($this->mysql)
                                ->select("SELECT CONCAT(LEFT(y.seiban , 10),'-',z.Haccyuu_Hoban) as po_no,
                                            date_format(z.Kaitou_Nouki_Jikoku,'%Y/%m/%d') as pmi_answer_date,
                                            date_format(z.Kaitou_Nouki_Jikoku,'%H:%i:%s') as pmi_answer_time,
                                            y.`code` as pcode,
                                            y.code_name as pname,
                                            (y.cvol - y.tjitu) as po_balance,
                                            LEFT(y.cdate,8) as requested_delivery_date,
                                            z.MRPKanrisya as mrp_no,
                                            z.Tokuisaki_Code as customer_code,
                                            y.cname as customer_name,
                                            z.Kaitou_Qty as pmi_answer_quantity,
                                            z.Tokuisaki_Nouki as customer_let,
                                            y.jdate as jdate,
                                            z.Haccyuu_No,
                                            z.Haccyuu_Hoban,
                                            z.Hinmoku_Code,
                                            z.Hinmoku_tekisuto,
                                            z.Hokanbasyo,
                                            z.MRPKanrisya,
                                            z.Haccyuu_Bi,
                                            z.Siiresaki_Code,
                                            z.Shiiresaki_Tekisuto,
                                            z.Haccyuu_Qty,
                                            z.Haccyuu_Zan_Qty,
                                            z.Toukei_kannrenn_nounyuu_Bi,
                                            z.Kaitou_Nouki_Jikoku,
                                            z.Kaitou_Qty,
                                            z.Tokuisaki_Code,
                                            z.Tokuisaki_Mei,
                                            z.Tokuisaki_Nouki
                                        FROM flex_prod_balance_zymr as z
                                        LEFT JOIN flex_prod_balance_ypics as y
                                        ON z.Haccyuu_No = LEFT(y.seiban , 10) ");


                if (count($zymr_ypics) > 0) {
                    $formatted_content = $this->generateProdBalanceFormat($zymr_ypics);
                    $generated = $this->generateCSVFile("PRODUCTION_PMI_TS","ProdBalance",$formatted_content);

                    if ($generated) {
                        $errors_data = DB::connection($this->mysql)
                                        ->select("SELECT Haccyuu_No,
                                                        Haccyuu_Hoban,
                                                        Hinmoku_Code,
                                                        Hinmoku_tekisuto,
                                                        Hokanbasyo,
                                                        MRPKanrisya,
                                                        DATE_FORMAT(Haccyuu_Bi,'%Y/%m/%d') as Haccyuu_Bi,
                                                        Siiresaki_Code,
                                                        Shiiresaki_Tekisuto,
                                                        Haccyuu_Qty,
                                                        Haccyuu_Zan_Qty,
                                                        DATE_FORMAT(Toukei_kannrenn_nounyuu_Bi,'%Y/%m/%d') as Toukei_kannrenn_nounyuu_Bi,
                                                        DATE_FORMAT(Kaitou_Nouki_Jikoku,'%Y/%m/%d') as Kaitou_Nouki,
                                                        DATE_FORMAT(Kaitou_Nouki_Jikoku,'%H:%i:%s') as Kaitou_Jikoku,
                                                        Kaitou_Qty,
                                                        Tokuisaki_Code,
                                                        Tokuisaki_Mei,
                                                        DATE_FORMAT(Tokuisaki_Nouki,'%Y/%m/%d') as Tokuisaki_Nouki
                                                FROM flex_prod_balance_error
                                                ORDER BY Haccyuu_No, Haccyuu_Hoban");

                        $this->ErrorsExcelFileCreate($errors_data);

                        $return_data = [
                            'msg' => 'Production Balance & Ship Plan data was processed, Please wait to download.',
                            'status' => 'success',
                            'errors_data' => $errors_data
                        ];
                    }
                } else {
                    $return_data = [
                        'msg' => 'No data was processed.',
                        'status' => 'failed',
                        'errors_data' => []
                    ];
                }
            }

        } catch (\Exception $th) {
            $return_data = [
                'msg' => $th->getMessage(),
                'status' => 'error',
                'errors_data' => []
            ];
        }

        return $return_data;
    }

    public function generateProdBalanceFormat($pbalance_data)
    {
    	$i = '"';
    	$o = ',';
        $content = "PONo,PMI Answer Date,PMI Answer Time,PCode,PName,POBalance,Requested delivery date,MRP No,Customer code,Customer name,PMI Answer Quantity,Customer let,Other Date"."\r\n";

        foreach ($pbalance_data as $key => $data) {
            if (is_null($data->po_no)) {
                DB::connection($this->mysql)->table('flex_prod_balance_error')
                    ->insert([
                        'Haccyuu_No' => $data->Haccyuu_No, 
                        'Haccyuu_Hoban' => $data->Haccyuu_Hoban, 
                        'Hinmoku_Code' => $data->Hinmoku_Code, 
                        'Hinmoku_tekisuto' => $data->Hinmoku_tekisuto, 
                        'Hokanbasyo' => $data->Hokanbasyo, 
                        'MRPKanrisya' => $data->MRPKanrisya, 
                        'Haccyuu_Bi' => $data->Haccyuu_Bi, 
                        'Siiresaki_Code' => $data->Siiresaki_Code, 
                        'Shiiresaki_Tekisuto' => $data->Shiiresaki_Tekisuto, 
                        'Haccyuu_Qty' => $data->Haccyuu_Qty, 
                        'Haccyuu_Zan_Qty' => $data->Haccyuu_Zan_Qty, 
                        'Toukei_kannrenn_nounyuu_Bi' => $data->Toukei_kannrenn_nounyuu_Bi, 
                        'Kaitou_Nouki_Jikoku' => $data->Kaitou_Nouki_Jikoku, 
                        'Kaitou_Qty' => $data->Kaitou_Qty, 
                        'Tokuisaki_Code' => $data->Tokuisaki_Code, 
                        'Tokuisaki_Mei' => $data->Tokuisaki_Mei, 
                        'Tokuisaki_Nouki' => $data->Tokuisaki_Nouki, 
                    ]);

            } else {
                $rdd_yy = substr($data->requested_delivery_date,0,4);
                $rdd_mm = substr($data->requested_delivery_date,4,2);
                $rdd_dd = substr($data->requested_delivery_date,6,2);

                $requested_delivery_date = $rdd_dd.'/'.$rdd_mm.'/'.$rdd_yy;

                $jd_yy = substr($data->jdate,0,4);
                $jd_mm = substr($data->jdate,4,2);
                $jd_dd = substr($data->jdate,6,2);

                $jdate = $jd_yy.'/'.$jd_mm.'/'.$jd_dd;

                $content .= trim(preg_replace('/\t+/','',$data->po_no)).$o.
                        trim(preg_replace('/\t+/','',$data->pmi_answer_date)).$o.
                        trim(preg_replace('/\t+/','',$data->pmi_answer_time)).$o.
                        trim(preg_replace('/\t+/','',$data->pcode)).$o.
                        trim(str_replace(",","",preg_replace('/\t+/','',$data->pname))).$o.
                        trim(preg_replace('/\t+/','',$data->po_balance)).$o.
                        trim(preg_replace('/\t+/','',$requested_delivery_date)).$o.
                        trim(preg_replace('/\t+/','',$data->mrp_no)).$o.
                        trim(preg_replace('/\t+/','',$data->customer_code)).$o.
                        trim(str_replace(",","",preg_replace('/\t+/','',$data->customer_name))).$o.
                        trim(preg_replace('/\t+/','',$data->pmi_answer_quantity)).$o.
                        trim(preg_replace('/\t+/','',$data->customer_let)).$o.
                        trim(preg_replace('/\t+/','',$jdate))."\r\n";
            }
            

        }

    	return $content;
    }

    private function ErrorsExcelFileCreate($data)
    {
        Excel::create("ZYPF5210_PMI_TS", function($excel) use($data)
		{
            $excel->sheet("errors", function($sheet) use($data)
            {
                $sheet->setHeight(1, 15);
                $sheet->cell('A1',"Haccyuu_No");
                $sheet->cell('B1',"Haccyuu_Hoban");
                $sheet->cell('C1',"Hinmoku_Code");
                $sheet->cell('D1',"Hinmoku_tekisuto");
                $sheet->cell('E1',"Hokanbasyo");
                $sheet->cell('F1',"MRPKanrisya");
                $sheet->cell('G1',"Haccyuu_Bi");
                $sheet->cell('H1',"Siiresaki_Code");
                $sheet->cell('I1',"Shiiresaki_Tekisuto");
                $sheet->cell('J1',"Haccyuu_Qty");
                $sheet->cell('K1',"Haccyuu_Zan_Qty");
                $sheet->cell('L1',"Toukei_kannrenn_nounyuu_Bi");
                $sheet->cell('M1',"Kaitou_Nouki");
                $sheet->cell('N1',"Kaitou_Jikoku");
                $sheet->cell('O1',"Kaitou_Qty");
                $sheet->cell('P1',"Tokuisaki_Code");
                $sheet->cell('Q1',"Tokuisaki_Mei");
                $sheet->cell('R1',"Tokuisaki_Nouki");

                $row = 2;
                foreach ($data as $key => $dt) {

                    $sheet->cell('A'.$row, $dt->Haccyuu_No);
                    $sheet->cell('B'.$row, $dt->Haccyuu_Hoban);
                    $sheet->cell('C'.$row, $dt->Hinmoku_Code);
                    $sheet->cell('D'.$row, $dt->Hinmoku_tekisuto);
                    $sheet->cell('E'.$row, $dt->Hokanbasyo);
                    $sheet->cell('F'.$row, $dt->MRPKanrisya);
                    $sheet->cell('G'.$row, $dt->Haccyuu_Bi);
                    $sheet->cell('H'.$row, $dt->Siiresaki_Code);
                    $sheet->cell('I'.$row, $dt->Shiiresaki_Tekisuto);
                    $sheet->cell('J'.$row, $dt->Haccyuu_Qty);
                    $sheet->cell('K'.$row, $dt->Haccyuu_Zan_Qty);
                    $sheet->cell('L'.$row, $dt->Toukei_kannrenn_nounyuu_Bi);
                    $sheet->cell('M'.$row, $dt->Kaitou_Nouki);
                    $sheet->cell('N'.$row, $dt->Kaitou_Jikoku);
                    $sheet->cell('O'.$row, $dt->Kaitou_Qty);
                    $sheet->cell('P'.$row, $dt->Tokuisaki_Code);
                    $sheet->cell('Q'.$row, $dt->Tokuisaki_Mei);
                    $sheet->cell('R'.$row, $dt->Tokuisaki_Nouki);
                    $row++;
                }
            });
		})->store('xls', storage_path('FlexSched/ProdBalance'));
    }
    // Prod Balance

    // global
    private function generateCSVFile($filename,$folder,$content)
    {
        $generated = false;

    	$path = storage_path().'/FlexSched'.'/'.$folder;

        if (!File::exists($path)) {
            File::makeDirectory($path, 0777, true, true);
        }

        $file = $path."/".$filename.".csv";

    	$myfile = fopen($file, "w") or die("Unable to open file!");
		fwrite($myfile, $content);
		$generated = fclose($myfile);


        return $generated;
    }

    public function downloadFile(Request $req)
    {
        $myFile = storage_path().'/FlexSched//'.$req->folder.'/'.$req->filename;
    	return response()->download($myFile);//->deleteFileAfterSend(true);
    }

    private function checkIndexes($assoc_arr, $rawData)
    {
        $is_valid = true;
        if (is_array($assoc_arr)) {
            foreach ($assoc_arr as $key => $assoc) {
                $indx = preg_replace('/[ \t]+/', ' ', preg_replace('/[\r\n]+/', "", $assoc));
                if (!isset($rawData[$indx])) {
                    $is_valid = false;
                    break;
                    exit;
                }
            }
        }

        return $is_valid;
    }

    private function getFilePointerUTF8($target_file){
        $current_locale = setlocale(LC_ALL, '0'); // Backup current locale.
    
        setlocale(LC_ALL, 'ja_JP.UTF-8');
    
        // Read the file content in SJIS-Win.
        $content = file_get_contents($target_file);
    
        // Convert file content to SJIS-Win.
        $content = mb_convert_encoding($content, "UTF-8", "SJIS-win");
    
        // Save the file as UTF-8 in a temp location.
        $fp = tmpfile();
        fwrite($fp, $content);
        rewind($fp);
    
        setlocale(LC_ALL, $current_locale); // Restore the backed-up locale.
    
        return $fp;
    }
}
